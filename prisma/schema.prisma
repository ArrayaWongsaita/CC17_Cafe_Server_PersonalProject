// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  phone     String?  @unique
  password  String
  firstName String
  lastName  String
  address   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  cartitem CartItem[]
  order    Order[]
}


model Product {
  id          Int         @id @default(autoincrement())
  productName String      @unique
  description String
  price       Float
  image       String
  isShow      Boolean     @default(true)
  createdAt   DateTime    @default(now()) @db.Timestamp(0)
  updatedAt   DateTime    @updatedAt @db.Timestamp(0)
  cartitem    CartItem[]
  orderitem   OrderItem[]
}

model CartItem {
  id Int @id @default(autoincrement())

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  amount    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Order {
  id Int @id @default(autoincrement())

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  phone     String   
  firstName String
  lastName  String
  address   String
  massage   String?  
  slipImage String
  price     Float
 
  status    String @default("Pending")
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  orderitem OrderItem[]
}

model OrderItem {
  id Int @id @default(autoincrement())

  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  amount    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}


